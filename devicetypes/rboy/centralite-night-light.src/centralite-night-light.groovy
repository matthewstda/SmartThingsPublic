/*
 * -----------------------
 * --- DEVICE HANDLER ----
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() {
    return "01.00.01"
}

/*
 * Copyright RBoy Apps, redistribution or reuse of code or any changes is not allowed without permission
 * Device Handler for the Centralite Light Light with ZigBee Repeater
 *
 * Change Log
 * 2019-11-05 - (v01.00.01) Update device health check protocol
 * 2019-05-01 - (v01.00.00) Initial public release
 *
 * Original License
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

metadata {
	definition (name: "Centralite Night Light", namespace: "rboy", author: "RBoy Apps", ocfDeviceType: "oic.d.light", mnmn: "SmartThings", vid:"generic-dimmer", genericHandler: "Zigbee") {
		capability "Actuator"
		capability "Configuration"
		capability "Refresh"
		capability "Power Source"
		capability "Switch"
		capability "Switch Level"
		capability "Health Check"
		capability "Light"

        fingerprint profileId: "0104", inClusters: "0000, 0003, 0004, 0005, 0006, 0008, 0B05", outClusters: "0019", manufacturer: "CentraLite", model: "3420", deviceJoinName: "Centralite Night Light (ZigBee Repeater)"
	}

    preferences {
        input title: "", description: "Centralite Night Light with ZigBee Repeater Device Handler v${clientVersion()}", displayDuringSetup: false, type: "paragraph", element: "paragraph", required: true
        input "rateOfDimming", "decimal", title: "Rate of dimming (seconds)", displayDuringSetup: false, range: "0..10"
    }

	tiles(scale: 2) {
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.switches.light.on", backgroundColor:"#00A0DC", nextState:"turningOff"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.switches.light.off", backgroundColor:"#ffffff", nextState:"turningOn"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
		}
		standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
			state "default", label:"", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
        valueTile("powerSource", "device.powerSource", width: 2, height: 1, inactiveLabel: true, decoration: "flat") {
			state "powerSource", label: 'Power Source: ${currentValue}', backgroundColor: "#ffffff"
		}
		main "switch"
		details(["switch", "refresh"])
	}
}

private getPOWER_SOURCE() { 0x0007 } // Get power source (BASIC)

// Parse incoming device messages to generate events
def parse(String description) {
	log.trace "${description?.inspect()}"

    sendEvent([name: "codeVersion", value: clientVersion()]) // Save client version for parent app
    sendEvent([name: "dhName", value: "Centralite Night Light Device Handler"]) // Save DH Name for parent app

	def event = zigbee.getEvent(description)
	if (event) {
        log.info "ZigBee Event: $event"
        if (event.name=="level" && event.value==0) {
        } else {
			sendEvent(event)
		}
	} else {
		def descMap = zigbee.parseDescriptionAsMap(description)
        log.trace "${descMap?.inspect()}"
		if (descMap && descMap.commandInt == 0x07) { // Handle REPORTING RESPONSE
            switch (descMap.clusterInt) {
                case zigbee.ONOFF_CLUSTER:
                	if (descMap.data[0] == "00") {
                        log.debug "ON/OFF REPORTING CONFIG RESPONSE: SUCCESSFUL"
                        sendEvent(name: "checkInterval", value: 60 * 12, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
                    } else {
                        log.warn "ON/OFF REPORTING CONFIG FAILED- error code:${cluster.data[0]}"
                    }
                    break
                    
                case zigbee.LEVEL_CONTROL_CLUSTER:
                    if (descMap.data[0] == "00") {
                        log.debug "LEVEL CONTROL REPORTING CONFIG RESPONSE: SUCCESSFUL"
                        sendEvent(name: "checkInterval", value: 60 * 12, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])
                    } else {
                        log.warn "LEVEL CONTROL REPORTING CONFIG FAILED- error code:${cluster.data[0]}"
                    }
                    break
                    
                default:
                    log.warn "UNKNOWN REPORTING CONFIG RESPONSE FOR ${descMap.clusterId}: ${descMap.inspect()}"
                    break
            }
		} else if (descMap && descMap.commandInt == 0x0B) { // Handle DEFAULT response
            switch (descMap.clusterInt) {
                case zigbee.LEVEL_CONTROL_CLUSTER:
                    if (descMap.data[1] == "00") {
                        log.debug "LEVEL CONTROL RESPONSE SUCCESSFUL for COMMAND ${descMap.data[0]}"
                    } else {
                        log.warn "LEVEL CONTROL RESPONSE ${descMap.data[1]} for COMMAND ${descMap.data[0]}"
                    }
                    break
                    
                default:
                    log.warn "UNKNOWN REPORTING CONFIG RESPONSE FOR ${descMap.clusterId}: ${descMap.inspect()}"
                    break
            }
        } else if (descMap && descMap.clusterInt == 0x8021) { // Bind Response
            log.debug "Bind response for profile ${descMap.profileId}: ${descMap.data}"
        } else {
            log.warn "DID NOT PARSE MESSAGE: ${descMap.inspect()}"
        }
    }
}

def off() {
    log.trace "Off"
	zigbee.off()
}

def on() {
    log.trace "On"
	zigbee.on()
}

def setLevel(value, rate = null) {
    def setRate = rateOfDimming ? (int)(rateOfDimming * 10) : null // The range is from 0 to 100 (inputs are in seconds from 0 to 10)

    log.trace "SetLevel value:$value, rate:${rate ?: setRate}"

	zigbee.setLevel(value, (rate ?: setRate))
}
/**
 * PING is used by Device-Watch in attempt to reach the Device
 * */
def ping() {
    log.trace "Ping called"
	return zigbee.onOffRefresh()
}

def refresh() {
    log.trace "Refresh called"
    return (
        zigbee.onOffRefresh() + 
        zigbee.levelRefresh() +
        zigbee.readAttribute(zigbee.BASIC_CLUSTER, POWER_SOURCE)
    )
}

def installed() {
    log.debug "Install called"
}

def updated() {
    log.debug "Updated called"
}

def uninstalled() {
    log.debug "Uninstalled called"
}

def configure() {
	log.debug "Configuring Reporting and Bindings."
	// Device-Watch allows 2 check-in misses from device + ping (plus 1 min lag time)
	// enrolls with default periodic reporting until newer 5 min interval is confirmed
	sendEvent(name: "checkInterval", value: 2 * 10 * 60 + 1 * 60, displayed: false, data: [protocol: "zigbee", hubHardwareId: device.hub.hardwareID, offlinePingable: "1"])

	// OnOff minReportTime 0 seconds, maxReportTime 5 min. Reporting interval if no activity
    return (
        zigbee.onOffConfig(0, 300) +
        zigbee.levelConfig() +
        refresh()
    )
}

// THIS IS THE END OF THE FILE